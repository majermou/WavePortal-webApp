{"version":3,"sources":["App.js","index.js"],"names":["App","contractAddress","contractABI","ABI","abi","useState","currentAccount","setCurrentAccount","msgValue","setMsgValue","allWaves","setAllWaves","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","gasLimit","waveTxn","hash","wait","waves","wavesCleaned","map","address","waver","timestamp","Date","message","useEffect","onNewWave","from","prevState","on","off","className","value","placeholder","onChange","event","target","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e26c2236.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport ABI from \"./utils/WavePortal.json\";\n\nexport default function App() {\n  const contractAddress = \"0x70f2C0dd12E5938940F7c6BF1787e100990EC288\";\n  const contractABI = ABI.abi;\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [msgValue, setMsgValue] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n      } else {\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n          getAllWaves();\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      getAllWaves();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waveTxn = await wavePortalContract.wave(msgValue, { gasLimit: 300000 });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        \n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          };\n        });\n        \n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n  \n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          ðŸ‘‹ Hey there!\n        </div>\n        <div className=\"bio\">\n          I am AJERMOUNE and I'm passionate about the Defi, Blockchain, Decentralization so that's pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n        <br/><br/>\n        {currentAccount && (\n          <>\n            <textarea\n                  value={msgValue}\n                  placeholder=\"Enter you're message :)\"\n                  onChange={event => setMsgValue(event.target.value)}\n                  className=\"message\"\n            />\n            <button className=\"waveButton\" onClick={wave}>\n              Wave at Me\n            </button>\n          </>\n        )}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet} >\n            Connect Wallet\n          </button>\n        )}\n        <br/><br/><br/>\n        {allWaves.length !== 0 &&\n          <>\n            <h1>Waves Log :</h1>\n            {allWaves.map((wave, index) => {\n              return (\n                <div key={index} style={{ backgroundColor: \"#f8f8f8\", marginTop: \"16px\", padding: \"8px\" }}>\n                  <div>Address: {wave.address}</div>\n                  <div>Time: {wave.timestamp.toString()}</div>\n                  <div>Message: {wave.message}</div>\n                </div>)\n            })}\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}